"""
Adjusting pixel values for greyscale (255.0 count), preprocesing most complex part of NN
Base Sequential format NN in Keras, only left to right processing, passing through layers 
"""

%tensorflow_version 2.x 
import tensorflow as tf 
from tensorflow import keras 

import numpy as np 
import matplotlib.pyplot as plt 

#loading the dataset for images
fashion_mnist = keras.datasets.fashion_mnist

(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

train_images = train_images / 255.0

test_images = test_images / 255.0 


model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)), #Input layer, takes in shape of 28 x 28 into 784 pixels
    keras.layers.Dense(128, activation='relu'), #Hidden layer, Dense layer, should gen. be smaller than first (every neuron in previous network is connected to this one)
    keras.layers.Dense(10, activation='softmax')
])

"""
Hyperparameters to play around with optimizer, loss, metrics, activation
"""

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

#training the model 
model.fit(train_images, train_labels, epochs=8)

"""
Making predictions on multiple items at a time, always need to put things in the format of array 
"""

predictions = model.predict(test_images)
test_images.shape
print(class_names[np.argmax(predictions[0])])

"""
Every image has a list for what image it thinks it is, 
we see the probability 
np.argmax returns the index of the highest value within the list predictions 
Checking based on class 
class_names outside of np.argmax delivers what classname is associated 

find the maximum value of predictions list of element 0 which corresponds to a numerical value 
which represents the highest probability of one of the 10 classes of clothing that is seen above
this value can be passed through class names and correspond with the same index we see for clothing
"""

#87.1% testing data accuracy, pretty good model 
test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=1)
print('Test accuracy', test_acc)
